#include <iostream>
using namespace std;

bool hasDuplicates(int arr[], int size) {
    // Sort the array using any O(n log n) sorting algorithm
    quickSort(arr, 0, size - 1);

    // Check if adjacent elements are the same
    for (int i = 0; i < size - 1; ++i) {
        if (arr[i] == arr[i + 1]) {
            return true; // Duplicate found
        }
    }
    return false; // No duplicate found
}

// Quick Sort implementation
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pivot = partition(arr, low, high);

        quickSort(arr, low, pivot - 1);
        quickSort(arr, pivot + 1, high);
    }
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; ++j) {
        if (arr[j] < pivot) {
            ++i;
            std::swap(arr[i], arr[j]);
        }
    }
    std::swap(arr[i + 1], arr[high]);
    return (i + 1);
}

int main() {
    int t;
    cout<<"Enter the number of test cases";
    cin>>t;
    while(t){
        cout<< "Enter the size";
        int size;
        cin>>size;
        int arr[size];
        cout<<"Enter the Elements";
        for(int i =0; i<size; i++){
            cin>>arr[i];
        }
        //cheks duplicate
        if (hasDuplicates(arr, size)) {
            cout << "\n";
        } else {
            cout << "NO\n";
        }
        t--;
    }
    return 0;
}
